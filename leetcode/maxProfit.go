package leetcode

/*
	121. 买卖股票的最佳时机

给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。

注意：你不能在买入股票前卖出股票。



示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
*/

//解题思路：
// 当前最大利润 = 当前价格 - 之前最小价格
// 当有利润比之前大时，替换原来最大利润。当最小价格比之前小时，替换之前最小价格
func maxProfit(prices []int) int {
	n := len(prices)
	if n <= 1 {
		return 0
	}

	//记录买入价格
	buy := -prices[0]
	//记录最大利润
	maxFit := 0

	for i := 1; i < n; i++ {
		//这时候买入，记录最小值
		tBuy := max(buy, -prices[i])
		//这时候卖出，记录最大利润
		tSell := max(prices[i]+buy, maxFit)

		buy, maxFit = tBuy, tSell
	}
	return maxFit

}

func max(x, y int) int {
	if x > y {
		return x
	}

	return y

}
